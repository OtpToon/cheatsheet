CSS

a {
	text-decoration: underline/none;
}

order important!
[tag]:link
[tag]:visited
[tag]:hover
[tag]:active

cursor: pointer;

button{
	box-shadow: [offset-x: length] [offset-y: length] ;
}
use example:
hover background change
active color change

float: left;

transition: ;

.something > li {}

.something li+li::before
li+li = only if those 2 are adjacent it selects them
::before = puts this before the element
::after
content: "";

border-left-color: [color];
vertical-align: ;

breadcrumbs:
	location - based on hierarchical structure of site
	attribute - based on attributes of current page or item
	path - unique to a userâ€™s journey on the site

object-fit: cover/contain/fill/none/scale-down


HTML

title=" " in <a> (tooltips)
<button></button>

wrap a in div with class and change class background-color property for propper interaction


Design Guide

Wireframes and Prototypes: https://medium.com/thinking-design/everything-you-need-to-know-about-wireframes-and-prototypes-76f828a1bcbc
Order of HTML
enter CSS rulessets without content when creating html tags

Grid Design: columns, rows, gutter, margin
(usually 12 or 16 columns and 4ish rows, gutter is significantly smaller than row/column)
(responsive: pc 12, tablet 6, movile 4 column grid)
whitespace: passive and active

Remember, the reasons we design using grids are:
-Promote consistency within our designs
-Properly align elements on our page
-Provide ample spacing between content
Remember a grid is made up of:
-Columns
-Gutters
-Margins
Spacing is incredibly important within a design to ensure:
-Elements have ample room to breathe
-Denote emphasis on certain parts of a page
-Promote harmonious patterns and rhythms within your designs

Flexbox (Design/CSS)
display:flex/inline-flex; -> Flex *container*
main axis (horizontal(default))
justify-content:flex-start/-end/center/space-around/-between, flex-wrap:wrap/wrap-reverse/(default)nowrap
cross axis (vertical(default))
align-items:flex-start/-end/center/baseline/stretch(combined with min/max width/height) (single row), align-content:flex-start/-end/center/space-between/-around/(default)stretch (multiple rows)

flex-grow:0(default)/1/2/... , flex-shrink:0/1(default)/2/..., flex-basis:length,(shorthand) flex:grow shrink(optional) basis(optional)
changing axis behaviour
flex-direction:row(default)/row-reverse/column/column-reverse, (shorthand)flex-flow:flex-direction flex-wrap;