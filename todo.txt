HTML
<script></script> = embed javascript-code into the html file
<script src="./exampleScript.js></script> = linking a .js file to the html file
<script src="..." defer></script> = wait to load this script until the rest of the htmlfile is loaded
<script src="..." async></script> = loads the script at the same time as the rest of the file and executes as soon as it is downloaded

old convention:
	put scripts right before </body>
current convention:
	put scripts in the <head> with defer or async

<form action"[path to file used after submission]" method="[type of how info is sent and processed (POST)]"
<input id="[id]" name="[name]" type="[type(text, password, number, range, checkbox, radio, submit, select)]" (required, if so) min/maxlength="[number]" min/max="[number]" pattern="[regex]" placeholder="[text]">
<label for="[id/name]">TEXT</label>


DOM
	Document
	Object
	Model
	usually shown as html-tag-intendation or a tree
	parent, child node
		The DOM is a structural model of a web page that allows for scripting languages to access that page.
		The system of organization in the DOM mimics the nesting structure of an HTML document.
		Elements nested within another are referred to as the children of that element. The element they are nested within is called the parent element of those elements.
		The DOM also allows access to the attributes of an HTML element such as style, id, etc.

CSS

a {
	text-decoration: underline/none;
}

order important!
[tag]:link
[tag]:visited
[tag]:hover
[tag]:active

cursor: pointer;

button{
	box-shadow: [offset-x: length] [offset-y: length] ;
}
use example:
hover background change
active color change

float: left;

transition: ;

.something > li {}

.something li+li::before
li+li = only if those 2 are adjacent it selects them
::before = puts this before the element
::after
content: "";

border-left-color: [color];
vertical-align: ;

breadcrumbs:
	location - based on hierarchical structure of site
	attribute - based on attributes of current page or item
	path - unique to a user’s journey on the site

object-fit: cover/contain/fill/none/scale-down


HTML

title=" " in <a> (tooltips)
<button></button>

wrap a in div with class and change class background-color property for propper interaction


Design Guide

Wireframes and Prototypes: https://medium.com/thinking-design/everything-you-need-to-know-about-wireframes-and-prototypes-76f828a1bcbc
Order of HTML
enter CSS rulessets without content when creating html tags

Remember, the keys to building a more visually inclusive Web are:
- Using contrast so our text and colors provide better visual cues
- Using correct font size so our content is legible
- Creating user interfaces that are enhanced by, but not dependent on, color

Using ARIA roles and properties, alt attributes, and semantic elements in your HTML is a simple way to make your website accessible to visually-impaired Internet users.
- Using semantic HTML elements whenever possible (such as <header> instead of <div id="header">) will allow screen reader users to navigate your website more efficiently.
- The role attribute is used to communicate information about the role of specific elements.
- role="presentation" allows a screen reader to skip markup elements that don’t directly contain useful information.
- aria-label and other ARIA properties can be used to help users perceive information that is communicated visually but not through text.
- The alt attribute should be added to every image element (and all other elements that support it) instead of aria-label. When used, its value should be a useful description of the image.

Grid Design: columns, rows, gutter, margin
(usually 12 or 16 columns and 4ish rows, gutter is significantly smaller than row/column)
(responsive: pc 12, tablet 6, movile 4 column grid)
whitespace: passive and active

Remember, the reasons we design using grids are:
-Promote consistency within our designs
-Properly align elements on our page
-Provide ample spacing between content
Remember a grid is made up of:
-Columns
-Gutters
-Margins
Spacing is incredibly important within a design to ensure:
-Elements have ample room to breathe
-Denote emphasis on certain parts of a page
-Promote harmonious patterns and rhythms within your designs

Flexbox (Design/CSS)
display:flex/inline-flex; -> Flex *container*
main axis (horizontal(default))
justify-content:flex-start/-end/center/space-around/-between, flex-wrap:wrap/wrap-reverse/(default)nowrap
cross axis (vertical(default))
align-items:flex-start/-end/center/baseline/stretch(combined with min/max width/height) (single row), align-content:flex-start/-end/center/space-between/-around/(default)stretch (multiple rows)

flex-grow:0(default)/1/2/... , flex-shrink:0/1(default)/2/..., flex-basis:length,(shorthand) flex:grow shrink(optional) basis(optional)
changing axis behaviour
flex-direction:row(default)/row-reverse/column/column-reverse, (shorthand)flex-flow:flex-direction flex-wrap;


Grid (Design/CSS)
	display: grid;
	grid-template-columns: (length/percentage) repeat for amount of columns split by spaces
	grid-template-rows: (length/percentage) repeat for amount of rows split by spaces
	grid-template: rows "/" columns
	repeat([amount of rows/columns] [width/height specifications])
	minmax([smallest length], [biggest length])
	grid-template-area: "[row 1]" "[row 2]" etc example: "header header" "nav nav" "info services" "footer footer";
	row-gap:[length] / column-gap:[length] / gap: [row-gap] [column-gap]
	grid-row-start / grid-row-end: [number of gridline] (1 = above first row, 3 = above 3rd row etc) or span [number of rows]
	grid-row: [grid-row-start] "/" [grid-row-end] or span [number of rows]
	grid-column-start / grid-column-end: [number of gridline] (1 = left of first column, 3 = left of third column etc) span [number of columns]
	grid-column: [grid-column-start] "/" [grid-column-end] or or span [number of columns]
	grid-area: [grid-row-start] / [grid-column-start] / [grid-row-end] / [grid-column-end]
	grid-area: [name of element in grid-template-area] example: header/nav/info/services/footer

	unit fr : splits available space into amount of "fr" used and distributes space relatively (1fr 3fr = space divided into 4 equal parts, 1fr gets 1 part, 3fr gets 3 parts)

	justify-items: position within the grid
	justify-content: position within the grid-element
	same as flexbox, but without flex
	align-items: position within the grid
	align-content: position within the grid-element
	same as flexbox, but without flex
	justify-self/align-self - override of grid-rules justify-items/align-items (start/end/center/stretch)

	grid-auto-rows/grid-auto-columns: lengths (px, %, fr, repeat() )
	grid-auto-flow: row (or) column (with) dense (fill rows from left to right, add rows as needed) (fill columns from top to bot, add columns as needed) (tries to fill the grid when smaller elements are added)
	


Relative Measurements
	Em ("em" in css) changes as the font-size of the current element changes (font-size 16 -> 2em = 32)
	Rem ("rem" in css) (Root em) depends on the font-size of the <html>-tag (set by the browser of the device unless otherwise specified)
	Percentages: Height & Width depends on the size of the parent element (width should only be put to 100% when no padding, border or margin)
	Percentages: Padding & Margin depends on the width of the parent element
	Width: Minimum & Maximum (min-width, max-width) used to set hard limits
	Height: Minimum & Maximum (min-height, max-height) used to set hard limits
	Scaling Images and Videos VERY COMMON EXAMPLE: .container img { max-width: 100%; height: auto; display: block;}
	Scaling Background Images EXAMPLE body { background-image: url('#'); background-repeat: no-repeat; background-position: center; background-size: cover;}

	Em/Rem should be used for textbased layouts, otherwise use percentages


Media Queries
	Media Queries Example @media only screen and (max-width: 480px) { body { font-size: 12px} }
	Range Example @media only screen and (min-width: 320px) and (max-width: 480px) { /*ruleset for 320px-480px*/ }
	Dots Per Inch (DPI) / Dots Per Centimeter (DPC) Example @media only screen and (min-resolution: 300dpi) { /* CSS for high resolution screens */ }
	And Operator Example @media only screen and (max-width: 480px) and (min-resolution: 300dpi) { /* CSS ruleset */ }
	Comma Separated List Example @media only screen and (min-width: 480px), (orientation: landscape) { /* CSS ruleset */ }
	Breakpoints (typical width of devices) mobile (<= 480px), Table (<= 768px), Tablet landscape (<= 1024px), Laptop (<= 1600px), Desktop (> 1600px)

	Comma = one needs to be true, AND = all need to be true
	orientation: landscape (more width than height) / portrait (more height than width)


	When a website responds to the size of the screen it’s viewed on, it’s called a responsive website.
	You can write media queries to help with different screen sizes.
	Adding the viewport <meta> tag to our code allows us to control the width and scaling of the viewport so that it’s sized and scaled correctly on all devices.
	Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
	Media features can detect many aspects of a user’s browser, including the screen’s width, height, resolution, orientation, and more.
	The and operator requires multiple media features to be true at once.
	A comma separated list of media features only requires one media feature to be true for the code within to be applied.
	The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. Natural breakpoints are found by resizing the browser.




Javascript

console.log([this will be printed to the console]);
; should always be used, but code can usually run properly without
// comment
/* */ area comment
. dot operator
= asignment operator

Data Types
Number: any number, including decimals 4, 8, 1516, 23.42
BigInt: Any number, greater than 253-1 or less than -(253-1), with n appended to the number: 1234567890123456n
String: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes " ... "
Boolean: This data type only has two possible values— either true or false (without quotes)
Null: This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes).
Undefined: This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null. undefined means that a given value does not exist.
Symbol: new feature, not explained
Object: Collections of related data
class: Blueprint for Objects, usually named in PascalCase

Arithmetic Operators
Add: +
Subtract: -
Multiply:*
Divide: /
Remainder: % (auch mod or modulo genannt)

[String 1] + [String 2] = [String 1String 2]


Properties
'Hello'.length; = 5


Methods
'hello'.toUpperCase(); = 'HELLO'
'Hey'.startsWith('H'); = true
'   something    '.trim(); = 'something'


Built-in Objects
Math.random(); = random number between 0(inclusive) and 1(exclusive)
Math.floor(Math.random() * 50); = a whole number between 0(inclusive) and 50(exclusive)
Math.ceil(); = 
Number.isInteger();

Variables
Container for a value
var: short for variable, is a JavaScript keyword that creates, or declares, a new variable.
(ES6 or later)
let: keyword signals that the variable can be reassigned a different value. if init empty its type Undefined
const: variable cannot be reassigned because it is constant. can't be empty.

can't start with numbers
are case sensitive myname != myName
can't be a keyword


Mathematical Assignment Operators
w = w + 1; is the same as w += 1; (same for -, *, /)

Increment/Decrement Operator
a++ a-- 
++a --a

String Concatenation with Variables
console.log('I own a pet ' + myPet + '.'); = I own a pet [myPet].

String Interpolation (ES6 or later)
In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals
const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);

const myName = 'Toon';
let myCity = 'some City';
console.log(`My name is ${myName}. My favorite city is ${myCity}`);


typeof Operator
typeof [value/variable] = 'string'/'number' etc


Conditional Statements
if, else if (statement){code}
else {code}
comparison operators <, >, <=, >=, ===, !==
logical operators &&, ||, ! (AND, OR, NOT/BANG)
truthy vs falsy values falsy: 0, ''/"", null, undefined, NaN
truthy and falsy Assignment if (username){defaultName = username;}else{defaultName = 'Stranger';}, let username = ''; let defaultName = username || 'Stranger';
ternary operators shorthand if...else: [statement] ? [what happens when true] : [what happens when false];

switch statement
let groceryItem = 'papaya';

switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}

Functions

declaration:
function [name]([optional parameters = [optional default value]]){
	[code]
	return [return value] (default value is data type undefined);
}
expressions:
const [name] = function ([optional parameters]){
	[code]
	return [return value];
};
arrow functions:
const [name] = ([optional parameters]) => {
	[code]
	return [return value];
};
	no parameters:
		const functionName = () => {};
	one parameter:
		const functionName = paramOne => {};
	two or more:
		const functionName = (paramOne, paramTwo) => {};

	single line code:
		const sumNumbers = number => number + number; //"implicit return" returns number + number
	multi line code:
		const sumNumbers = number => {
			const sum = number + number;
			return sum;
		};

calling:
[name]([optional input]);

Helper function: function used to do a specific job of another function

Scope defines where variables can be accessed or referenced
Global Scope are defined outside of Blocks (Global Variables)
Block Scope is only accessible to the code within the curly braces (Local Variables)
Scope Pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes (Names used more than once)
Tightly scoping your variables will greatly improve your code in several ways:
	It will make your code more legible since the blocks will organize your code into discrete sections.
	It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!
	It’s easier to maintain your code, since your code will be modular.
	It will save memory in your code because it will cease to exist after the block finishes running.



Running JS
	in Browser console
		ctrl + shift + j (inspect element) -> console (on about:blank for pure JS, on any site to change that sites behaviour)
	
	in Browser Runtime Environment (Front End/Browser)
		<script> </script> //in html code
	
	in Node Runtime Environment (Back End/Serverside)
		installed Node.js -> write code in file -> terminal "node [filename]"
		(same in VS-Code Terminal, debugger also works)

Arrays
	creating arrays
		array literal: let variable = [x, 'y', 5, false];
	accessing arrays
		variable[0]; (strings are arrays of chars)
		variable[0] = ...;

		let condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];

		const utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];

		condiments[0] = 'Mayo';
		console.log(condiments);
		condiments = ['Mayo'];
		console.log(condiments);
		utensils[3] = 'Spoon';
		console.log(utensils);

		utensils.length; //=> 4
		utensils.push('something', 'something else'); //=> ['Fork', 'Knife', 'Chopsticks', 'Spork', 'something', 'something else']
		utensils.pop(); //=> ['Fork', 'Knife', 'Chopsticks', 'Spork', 'something'], returns 'something else'
		utensils.shift(); //=> ['Knife', 'Chopsticks', 'Spork', 'something'], returns 'Fork'
		utensils.unshift('thing1', 'thing2'); // => ['thing1', 'thing2', 'Knife', 'Chopsticks', 'Spork', 'something']
		//.join(), .slice(), .splice(), .shift(), .unshift(), and .concat() 

		when you pass an array into a function, if the array is mutated inside the function, that change will be maintained outside the function as well.
		You might also see this concept explained as pass-by-reference

		Destructuring
			let cars = ['ferrari', 'tesla', 'cadillac'];
			let [car1, car2, car3] = cars;
			console.log(car1, car2, car3);
	

	array structures
		nested arrays
			const nestedArr = [[1], [2, 3]];
			nestedArr[1]; // => [2, 3]
			nestedArr[1][0]; // => 2
	array manipulation


Loops
	for
		for (let counter = 0; counter < 4; counter++) {
			console.log(counter);
		};
	while
		let counter = 0;
		while (counter < 4){
			console.log(counter);
			counter++;
		};
	do...while
		let counter = 0;
		do {
			console.log(counter);
			counter++;
		} while (counter < 4);
	for...of
		const hobbies = ['singing', 'eating', 'quidditch', 'writing'];
		for (const hobby of hobbies) {
		console.log(`I enjoy ${hobby}.`);
		}
	nested Loops
		for (stuff){
			for (other stuff){
				-> nested loop
			};
		};
	break
		const rapperArray = ["Lil' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];

		for(let i = 0; i < rapperArray(.)length; ++i){
		console.log(rapperArray[i]);
		if (rapperArray[i] === 'Notorious B.I.G.'){
			break;
		}
		};
		console.log('And if you don\'t know, now you know.');
	continue
		-> skip the rest of this itteration of the loop
	

Objects

Object literal
	let spaceship = {
		[identifier] : [value], //identifier is type string
		'Fuel Type' : 'diesel',
		color : 'silver //identifier without special char can be without '
	};

Accessing Properties
	dot notation
		object.propname;
	bracket notation
		object['propname']; //can use string variables instead of string

	Dstructuring
		let destinations = { x: 'LA', y: 'NYC', z: 'MIA' };
		let { x, y, z } = destinations;
		console.log(x, y, z);

Property Assignment
	object.propname = value; //either changes or creates property
	object['propname'] = value;

	const spaceship = {type: 'shuttle'};
	spaceship = {type: 'alien'}; // TypeError: Assignment to constant variable.
	spaceship.type = 'alien'; // Changes the value of the type property
	spaceship.speed = 'Mach 5'; // Creates a new key of 'speed' with a value of 'Mach 5'

	delete object.propname; //removes propname from the object

Methods

	let truck = {
		model: '1977 Mustang convertible',
		maker: 'Ford',
		city: 'Detroit',
		year: '1977',
		convertible: true
	};
	const printCarInfo = ({model, maker, city}) => {
		console.log(`The ${model}, or ${maker}, is in the city ${city}.`);
	};
	printCarInfo(truck);

	function in an object

	const alienShip = {
		invade: function () { 
			console.log('Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.')
		}
	};
	are the same
	const alienShip = {
		invade () { 
			console.log('Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.')
		}
	};

Nested Objects
	an object might have another object as a property which in turn could have a property that’s an array of even more objects!

Pass by reference
	const spaceship = {
		homePlanet : 'Earth',
		color : 'silver'
	};
	
	let paintIt = obj => {
		obj.color = 'glorious gold'
	};
	
	paintIt(spaceship);
	
	spaceship.color // Returns 'glorious gold'

	let spaceship = {
		homePlanet : 'Earth',
		color : 'red'
	};
	let tryReassignment = obj => {
		obj = {
			identified : false, 
			'transport type' : 'flying'
		}
		console.log(obj) // Prints {'identified': false, 'transport type': 'flying'}
	};
	tryReassignment(spaceship) // The attempt at reassignment does not work.
	spaceship // Still returns {homePlanet : 'Earth', color : 'red'};
	spaceship = {
		identified : false, 
		'transport type': 'flying'
	}; // Regular reassignment still works.

Looping through objects
	for...in will execute a given block of code for each property in an object.
	
advanced objects
	how to use the this keyword.
		The this keyword references the calling object which provides access to the calling object’s properties
		const object = {
			variable: 'something',
			getVariable() {
				console.log(this.variable);
			}
		};
		using => to make functions prevents use of this
	conveying privacy in JavaScript methods.
		privacy doesn't exist, _varName is used to tell others to not change variables directly
	defining getters and setters in objects.
		const robot = {
			_model: '1E78V2',
			_energyLevel: 100,
			_numOfSensors: 15,
			get numOfSensors(){
				if(typeof this._numOfSensors === 'number'){
					return this._numOfSensors;
				} else {
					return 'Sensors are currently down.'
				}
			},
			set numOfSensors(num){
				if(typeof num === 'number' && num >= 0){
					this._numOfSensors = num;
				}
				else {
					console.log('Pass in a number that is greater than or equal to 0');
				}
			}
		};
		robot.numOfSensors = 100;
		console.log(robot.numOfSensors);
	creating factory functions.
		const robotFactory = (model, mobile) => {
			return {
				model : model,
				mobile : mobile,
				beep (){
				console.log('Beep Boop');
				}
			};
		};
		const tinCan = robotFactory('P-500', true);
		tinCan.beep();
	using destructuring techniques.
		const robotFactory = (model, mobile) => {
			return {
				model,
				mobile,
				beep() {
				console.log('Beep Boop');
				}
			}
		}
		// To check that the property value shorthand technique worked:
		const newRobot = robotFactory('P-501', false)
		console.log(newRobot.model)
		console.log(newRobot.mobile)


		const robot = {
			model: '1E78V2',
			energyLevel: 100,
			functionality: {
				beep() {
					console.log('Beep Boop');
				},
				fireLaser() {
					console.log('Pew Pew');
				},
			}
		};
		const {functionality} = robot;
		functionality.beep();
	Built-in Object Methods
		const robot = {
			model: 'SAL-1000',
			mobile: true,
			sentient: false,
			armor: 'Steel-plated',
			energyLevel: 75
		};
		// What is missing in the following method call?
		const robotKeys = Object.keys(robot);
		console.log(robotKeys);
		// Declare robotEntries below this line:
		const robotEntries = Object.entries(robot);
		console.log(robotEntries);
		// Declare newRobot below this line:
		const newRobot = Object.assign({laserBlaster: true, voiceRecognition: true}, robot);
		console.log(newRobot);


Higher-Order Functions
	Functions as Data
		const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
			for(let i = 1; i <= 1000000; i++) {
				if ( (2 + 2) != 4) {
				console.log('Something has gone very wrong :( ');
				}
			}
		};
		// Write your code below
		const isTwoPlusTwo = checkThatTwoPlusTwoEqualsFourAMillionTimes;
		isTwoPlusTwo();
		console.log(isTwoPlusTwo.name);
	Functions as parameters
		A higher-order function is a function that either accepts functions as parameters, returns a function, or both!
		const addTwo = num => {
			return num + 2;
		}
		const checkConsistentOutput = (func, val) => {
			let checkA = val+2;
			let checkB = func(val);
			if (checkA === checkB){
				return checkB;
				}
			return 'inconsistent results';
		}
		console.log(checkConsistentOutput(addTwo, 9));


Iterators
	Iterators are methods called on arrays to manipulate elements and return values.
	.forEach(function) //returns undefined
		const fruits = ['mango', 'papaya', 'pineapple', 'apple'];
		// Iterate over fruits below
		fruits.forEach(fruit => console.log('I want to eat a ' + fruit));
		const test = thing => {console.log('I want to eat a ' + thing)};
		fruits.forEach(test);

	.map(function) //returns a new array
		const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];
		// Create the secretMessage array below
		const secretMessage = animals.map(word => word[0]);
		console.log(secretMessage.join(''));

		const bigNumbers = [100, 200, 300, 400, 500];
		// Create the smallNumbers array below
		const smallNumbers = bigNumbers.map(num => num/100);

	.filter(function) //returns array of things that returned true
		const randomNumbers = [375, 200, 3.14, 7, 13, 852];
		// Call .filter() on randomNumbers below
		const smallNumbers = randomNumbers.filter(num => num < 250);

		const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];
		// Call .filter() on favoriteWords below
		const longFavoriteWords = favoriteWords.filter(word => word.length > 7);

	.findIndex(function) //returns number of the first elemt that returns true
		const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];
		const foundAnimal = animals.findIndex(animal => animal === 'elephant');
		const startsWithS = animals.findIndex(animal => animal[0] === 's');
	.reduce(function with 2 parameters using first and second elements of array, optional parameter for starting value) //returns 1 element of whatever you define
		const newNumbers = [1, 3, 5, 7];

		const newSum = newNumbers.reduce((accumulator, currentValue) =>{
			console.log('The value of accumulator: ', accumulator);
			console.log('The value of currentValue: ', currentValue);
			return accumulator + currentValue;
		}, 10);
		console.log(newSum);
	.some()//returns true if at least 1 statement is true
	.every()//returns true if every statement is true


Classes
	- Classes are templates for objects.
	- JavaScript calls a constructor method when we create a new instance of a class.
	- Inheritance is when we create a parent class with properties and methods that we can extend to child classes.
	- We use the extends keyword to create a subclass.
	- The super keyword calls the constructor() of a parent class.
	- Static methods are called on the class, but not on instances of the class.

	named in PascalCase (starting with uppercase, then going lowercase and uppercase again if a new word starts)
	_name => only access this variable with functions of the class, not directly
	EXAMPLE
	class ClassName {
		constructor(parameter) {
			this._variable = parameter
		}
		get variable() {
			return this.variable;
		}
		set variable(parameter){
			this._variable = parameter;
		}
	}

Export/Import
	export{name1 *as default, name2 *as default...}; //*optional
	or
	const recources ={
		stuff1
		stuff2
	}
	export default recources; 
	or
	export const function1 = (something) => {
		//logic
	};

	import {name1 *as myName1, name2 *as myName2...} from '[path]'; //*optional
	import nameForDefault from 'path';
	(in html: add <script type="module")

Errors
	console.log(*new* Error('Message goes here')); *optional just logs, doesn't stop the program
	throw *new* Error('Message goes here'); *optional ends the program
	try{
		//code that might fail
	}catch(e){
		console.log(e)//prints the error to console without killing the program
	}

async js
	functions
		setTimeout(functionToExecute, delayInMS);//waits delayInMS miliseconds before executing
		setInterval(function, intervalInMS);//calls function every intervalInMS miliseconds
		then(successFunc, failureFunc);//Promise.then(), uses first func for success, 2nd for failure, both with the return value of the promise
		catch(failureFunc);//same as then, but only Failure, used for speration of concerns
		all([Promise, Promise...]).then(successFunc).catch(failFunc);//runs the successFunc on every Promise, until a Promise fails - runs failFunc once OR every Promise is resolved
		
	keywords
		async function functionName(){
		await someFunctionWith_setTimeout()//which returns new Promise((resolve, reject)=>{ logic })
			OR
		await someVariableThatUsedAsyncBefore;
			OR
		await Promis.all(...);
	}

API
	fetch(stringOfURL);//requests information from the URL

	GET Request:
		const getSuggestions = () => {
		const endpoint = //URL as string
		
		fetch(endpoint).then(response => {
			if (response.ok) {
			return response.json();
			}
			throw new Error('Request failed!');
		}, networkError => {
			console.log(networkError.message)
		}).then(jsonResponse => {
			//deal with Response, for example:
			renderResponse(jsonResponse);
		})
		}
	async GET Request:
		const getAPIStuff = async () => {
			const endpoint = ;//build your URL as string
			try{
				const response = await fetch(endpoint)
				if(response.ok){
					//deal with the response, for example:
					const jsonResponse = await response.json();
				}
			}catch(err){
				console.log(err);
			}
		}
	POST Request:
		const shortenUrl = () => {
		const data = JSON.stringify(/* your Data*/);
		
			fetch(url, {
			method: 'POST',
			headers: {
			'Content-type': 'application/json',
			'apikey': apiKey
			},
			body: data
		}).then(response =>{
			if(response.ok){
			return response.json();
			}
			throw new Error('Request failed!');
		}, networkError => {
			console.log(networkError.message);
		}).then(jsonResponse => {
			//deal with Response, for example:
			renderResponse(jsonResponse);
		})
		}
	async POST Request:
		const shortenUrl = async () => {
			const urlToShorten = inputField.value;//data to pass to API
			const data = JSON.stringify({destination: urlToShorten});//format the data
			try {
				const response = await fetch(url, {//format your Request
					method : 'POST',
					body : data,
					headers : {
					'Content-type' : 'application/json',
					'apikey' : apiKey
					}
				}
				);
					if(response.ok){
				const jsonResponse = await response.json();
				renderResponse(jsonResponse);
				}
			} catch (error) {
				console.log(error);
			}
		}




Testing
	Types of tests
		//fastest/cheapest to slowest/most expensive test type
		Unit tests
			A unit test covers the smallest possible unit of testable code, such as a single function.
			In order to keep the scope of a unit test focused on the unit being tested,
			any data or behavior from other units or external sources that the unit relies on should be replaced with fake (mock) data or behavior.
			For example, in a weather application, we might have a number of functions that each handle a small piece of computation,
			such as converting fahrenheit to celsius or formatting incoming weather data from an API.
			Unit tests would be written first to ensure that these functions can perform independently before we move on to testing how they work
			together. Any data that might come in from an external database or API would be mocked.
		Integration tests
			An integration test covers how the units of a particular program work with one another.
			When testing integrations with external services, only the handling of incoming data is tested while the data itself remains mocked.
			For example, in a weather application, integration tests would be written to ensure that weather data fetched from an API will be
			properly formatted to be displayed to the user. It would also ensure that delays, errors, or invalid data from the external service
			would be handled properly once they are introduced. The data itself would be mocked.
		End to End tests
			An end to end test (sometimes referred to as a UI layer test or e2e) automates user flow to test the application in the way that a
			real user would experience it. To closely match the end user’s experience, this type of testing would also test interactions with
			external services such as databases and APIs.
			For example, in a weather application, end to end tests might be written to simulate a user searching for a particular location,
			selecting that location, choosing celsius or fahrenheit, and clicking through various aspects of the UI. In this test, the actual database
			and external API is used.
		
		Sinon Spies
		Mocking
		

	Typical Loop:
		1 Make Code Changes
		2 Make a pull request
		3 code change is tested (unit, integration, sometimes e2e)
		4 any failures -> local fixing -> step 2 / no failures -> 5
		5 pull request is allowed to merge
	
	Testing Methodologies

		- Automated testing makes code production more reliable thanks to the ease of running frequent tests on all new and old code in a software
			application.
		- Software companies don’t need to pick a singular software testing methodology — they can be combined and used at various stages
			during software development.
		- Some organizations take a test-first approach to software development, with testing methodologies such as TDD and BDD being the first
			step of code production.
		- Since software errors can cost businesses money and customer trust, testing is an integral part of the development process and used in
			some flavor by every software company.

		Test-driven Development (TDD)
			Testing doesn’t necessarily have to occur after code has been written. Test-driven development is a methodology that flips the order,
			where tests are written before the functioning code is written. By writing tests in this order, test cases can start with the definition
			of their purpose, or use case.
			Those use cases define the specification and documentation on what actions are to be supported by new code.
			TDD tests look at the components of code, like functions and classes, as the smallest unit to test.
			In practice, TDD can accelerate software development since it dictates short development cycles with direct test cases.
			There are many other benefits of test-driven development:
			- Developers can better understand the requirements of code, before writing the code.
			- Code that will never be executed won’t be added to the codebase.
			- The scope of development is reduced.
			- Code is written with testability in mind.
			TDD is not the only testing methodology that takes a test-first approach to software development.
		Behavior-driven Development (BDD)
			Another testing methodology that uses the strategy of writing test cases before code is behavior-driven development, or BDD.
			It is extremely similar to TDD in terms of process. Where these two methodologies differ is in why or when tests are written,
			what an individual unit is considered to be, and how the language of the test is composed.
			Since BDD tests are driven by behavior, the language of the test cases are simplified and written via collaboration between engineers,
			product owners, and other stakeholders, to ensure the specified behaviors make sense from a user perspective.
			It can be said that BDD is more specific than TDD. Changes to the code base, such as changing the design of the code,
			will not occur unless there is a relevant change in the product. Since those changes are feature-related,
			the unit of tests is called a “feature.” Test cases are related to whether or not the feature works,
			rather than if the individual functions or classes you are writing to develop features work.
			Altogether, the tests are about how the product behaves — not the nitty-gritty technical details.
		Specification by Example (SBE)
		Acceptance Test-driven Development (ATDD)

		Mocha test framework
			Setup in Project:
				Terminal:
					npm init
					npm install mocha -D
				Files:
					package.json:
						"scripts": {
							"test": "mocha"
						}
					//lets you use "npm test" in Terminal instead of "./node_modules/mocha/bin/mocha"
			Syntax:
				const assert = require('assert');
				const main = require('path/to/main.js');
				describe('objectname', () => {
					describe('.functionname', () => {
						it('expected behaviour', () => {
							const testdata
							const variable = objectname.functionname(testdata);
							assert.ok(variable === expected_outcome);
						});
						it('another expected behaviour', () => {
							const anotherTestdata
							const anothervariable = objectname.functionname(anotherTestdata);
							assert.ok(anothervariable === another_expected_outcome);
						});
						...
					});
					...
				});
			in main.js:
				module.exports = {to be tested stuff}

			Functions:
				describe('name', function);//"select" which part you'll test
				it('description', function);//"select" what functuality exactly you are testing
				assert.
					equal(testValue, expectedResult);// ==
					ok(logic with testValue and expected result);
					strictEqual(testValue, expectedResult);// ===
					notStrictEqual(testValue, expectedResult);// !==
					deepEqual(testObject, expectedObject);//compares the values of an object with ==
				"Hooks"
				beforeEach(function);//run before each test
				afterEach(function);//run after each test
				before(function);//run before the first test
				after(function);//run after the last test

JSON
	{
		"student": {
			"name": "Rumaisa Mahoney",
			"age": 30,
			"fullTime": true,
			"languages": [ "JavaScript", "HTML", "CSS" ],
			"GPA": 3.9,
			"favoriteSubject": null
		}
	}
	Syntax
		{...}//hold objects
		[...]//hold arrays
		://Seperator of name:value
		,//Sperator of name:value, name:value pairs - trailing , is forbidden
		""//names must use double quotes
	DataTypes
		string (double-quoted)
			used for unsupported data types, that will be translated in apps
		number (integer or floating point)
		object (name-value pair)
		array (comma delimited)
		boolean (true or false)
		null
	function
		JSON.
			parse(jsonData);//returns a js-Object with the exact data as the jsonData
			stringify(jsObject);//returns jsData with exact data as the jsObject

JS on html
	document.element to select the element
	document.element.innerHTML = '[working html]' to change the html inside of the selected element
		document.body.innerHTML = '<h1>This is now the heading of the body element</h1>'
	.querySelector('[selector like p]') returns the first element fitting the Description
	.getElementById('[id]')
	
	.getElementsByClassName('[class]')
	.getElementsByTagName('[tagname]')
		return elements in array

	.element.style.property = ... (property Camelcase instead of '-')(Value = 'value')

	.parentNode (is null for document)
	.children (if no children returns null)
		are properties on every node

	new_element = .createElement('[selector]') creates a new element without content
	new_element.id/innerHTML... to change/create content
	.[path].appendChild(new_element) to add the element to the website

	let element = document.[some sort of element selection]
	.element.parentNode.removeChild(element)
	.hidden = true/false (if you don't want to delete)

	clicking on button
		var element = document.querySelector('button');
		
		element.onclick = function() {
			element.style.backgroundColor = 'blue
		};
			(is the same as)
		function turnBlue() {
			element.style.backgroundColor = 'blue
		};
		element.onclick = turnBlue;
	
	Event Handler Registration
		[element].addEventListener('[eventName]', functiondefinition or functionname)
		[element].on[event] = eventHandlerFunction Definition OR Name;
			.onclick
			.onwheel
			.onmousedown
			.onmouseup
			.onmouseover
			.onmouseout

		[element].removeEventListener('[eventName]', functionname)

		function eventHandler(event){
			console.log(event.target/type/timeStamp)
		};

JSX
	JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot like HTML.
	What does “syntax extension” mean?
	In this case, it means that JSX is not valid JavaScript. Web browsers can’t read it!
	If a JavaScript file contains JSX code, then that file will have to be compiled. This means that before the file reaches a web browser,
	a JSX compiler will translate any JSX into regular JavaScript.

	the most outer part of JSX MUST be exactly 1 element
	Selfclosing tags MUST include the "/" at the end (example: <br />)
	using { normal js } lets you use js inside of JSX
		can't be used for if-Statements
		ternary works tho
			{ age>= drinkingAge ? 'Buy Drink' : 'Do Teen Stuff' }
			<img src={pics[coinToss()==='heads' ? 'kitty' : 'doggy']} />;
		String Array
			list = stringArray.map(person => <li>{person}</li>);
			list = stringArray.map((person, i) => <li key={'person_'+i}>{person}</li>);
	
	can be avoided using
		const greatestDivEver = React.createElement("div",null,"i am div");

	HTML class = JSX className//"class" is reserved in js

	<element attributename='attributevalue'>innerHTML</element>;
	(
		//multiline JSX
	);

	functions
		const variable = createRoot(specific Location in the DOM);//where to put JSX
		variable.render(JSX);//draw JSX


Github
	Workflow:
		1.) Create a branch
		2.) Commit Changes
		3.) Create a pull request
		4.) Review pull request
		5.) Merge and delete branch

	git init
		start a new Repository
	git clone [link]
		copy a project to work on locally
	git checkout -b [name of new branch]
		create a new branch locally and puts it as active
		without -b to change active branch
		instead "HEAD [filename]" to revert changes to last commit
	git add [filename or . (for all)]
		add specified file or all files in the directory to the current active branch
		can take multiple filenames in 1 line
	git status
		shows all the changes made since the last commit
	git commit -m "message"
		creates a savepoint of current files with a messages describing what was changed
			--amend (adds the current staging area to the previous commit) --no-edit (to not having to change the message of the commit)
	git push --set-upstream origin [branchname]
		uploads a local branch to github as new branch
	git log
		shows the history of changes made to the Repository
		usefull commands:
			--oneline (shows log with 1 line per commit)
			-S "keyword" (shows only commits with the keyword)
			--oneline -- graph (shows the order in which the commits were made visually)
	git show HEAD
		shows the log of the latest commit with all changes
	git reset [HEAD or starting 7 letters of the identifier] (optional filename)
		HEAD is the latest commit, otherwise use 7+ letters to choose which commit to use
		add filename to only reset a single file
			DELETES EVERY COMMIT AFTER THE ONE CHOSEN
	git diff
		only shows anything if there is differences to show
	git stash (pop/list)
		temporarily saves your current work to be able to change branches without loosing your work
		pop = go back to that save point
		list = show all stashes
		h = show all commands with explanation

	git alias commands
		git config --global alias.co "checkout" -> git co = git checkout
	
		

	Github Repository -> Pull request
		left is what is getting merged into
		right is where the changes come from
		-> create new pull request
			Comment = write down what needs to be tested
			Reviewers = add people who need to look at your changes

	nano [path/name of file to change]
		opens a file in text editor in terminal

README/.md
	Conventions:
		Project title
		Description (why i made this, what problems does it solve)
		Features (show off your what you are proud of)
		How to use (step by step how to install)
		Technologies (what frameworks/programs etc did you use and why)
		Collaborators (who did you work for, give them credit)
		License (let others know what they are allowed to do (https://choosealicense.com))
		