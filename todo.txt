CSS

a {
	text-decoration: underline/none;
}

order important!
[tag]:link
[tag]:visited
[tag]:hover
[tag]:active

cursor: pointer;

button{
	box-shadow: [offset-x: length] [offset-y: length] ;
}
use example:
hover background change
active color change

float: left;

transition: ;

.something > li {}

.something li+li::before
li+li = only if those 2 are adjacent it selects them
::before = puts this before the element
::after
content: "";

border-left-color: [color];
vertical-align: ;

breadcrumbs:
	location - based on hierarchical structure of site
	attribute - based on attributes of current page or item
	path - unique to a user’s journey on the site

object-fit: cover/contain/fill/none/scale-down


HTML

title=" " in <a> (tooltips)
<button></button>

wrap a in div with class and change class background-color property for propper interaction


Design Guide

Wireframes and Prototypes: https://medium.com/thinking-design/everything-you-need-to-know-about-wireframes-and-prototypes-76f828a1bcbc
Order of HTML
enter CSS rulessets without content when creating html tags

Grid Design: columns, rows, gutter, margin
(usually 12 or 16 columns and 4ish rows, gutter is significantly smaller than row/column)
(responsive: pc 12, tablet 6, movile 4 column grid)
whitespace: passive and active

Remember, the reasons we design using grids are:
-Promote consistency within our designs
-Properly align elements on our page
-Provide ample spacing between content
Remember a grid is made up of:
-Columns
-Gutters
-Margins
Spacing is incredibly important within a design to ensure:
-Elements have ample room to breathe
-Denote emphasis on certain parts of a page
-Promote harmonious patterns and rhythms within your designs

Flexbox (Design/CSS)
display:flex/inline-flex; -> Flex *container*
main axis (horizontal(default))
justify-content:flex-start/-end/center/space-around/-between, flex-wrap:wrap/wrap-reverse/(default)nowrap
cross axis (vertical(default))
align-items:flex-start/-end/center/baseline/stretch(combined with min/max width/height) (single row), align-content:flex-start/-end/center/space-between/-around/(default)stretch (multiple rows)

flex-grow:0(default)/1/2/... , flex-shrink:0/1(default)/2/..., flex-basis:length,(shorthand) flex:grow shrink(optional) basis(optional)
changing axis behaviour
flex-direction:row(default)/row-reverse/column/column-reverse, (shorthand)flex-flow:flex-direction flex-wrap;


Grid (Design/CSS)
	display: grid;
	grid-template-columns: (length/percentage) repeat for amount of columns split by spaces
	grid-template-rows: (length/percentage) repeat for amount of rows split by spaces
	grid-template: rows "/" columns
	repeat([amount of rows/columns] [width/height specifications])
	minmax([smallest length], [biggest length])
	grid-template-area: "[row 1]" "[row 2]" etc example: "header header" "nav nav" "info services" "footer footer";
	row-gap:[length] / column-gap:[length] / gap: [row-gap] [column-gap]
	grid-row-start / grid-row-end: [number of gridline] (1 = above first row, 3 = above 3rd row etc) or span [number of rows]
	grid-row: [grid-row-start] "/" [grid-row-end] or span [number of rows]
	grid-column-start / grid-column-end: [number of gridline] (1 = left of first column, 3 = left of third column etc) span [number of columns]
	grid-column: [grid-column-start] "/" [grid-column-end] or or span [number of columns]
	grid-area: [grid-row-start] / [grid-column-start] / [grid-row-end] / [grid-column-end]
	grid-area: [name of element in grid-template-area] example: header/nav/info/services/footer

	unit fr : splits available space into amount of "fr" used and distributes space relatively (1fr 3fr = space divided into 4 equal parts, 1fr gets 1 part, 3fr gets 3 parts)

	justify-items: position within the grid
	justify-content: position within the grid-element
	same as flexbox, but without flex
	align-items: position within the grid
	align-content: position within the grid-element
	same as flexbox, but without flex
	justify-self/align-self - override of grid-rules justify-items/align-items (start/end/center/stretch)

	grid-auto-rows/grid-auto-columns: lengths (px, %, fr, repeat() )
	grid-auto-flow: row (or) column (with) dense (fill rows from left to right, add rows as needed) (fill columns from top to bot, add columns as needed) (tries to fill the grid when smaller elements are added)
	


Relative Measurements
	Em ("em" in css) changes as the font-size of the current element changes (font-size 16 -> 2em = 32)
	Rem ("rem" in css) (Root em) depends on the font-size of the <html>-tag (set by the browser of the device unless otherwise specified)
	Percentages: Height & Width depends on the size of the parent element (width should only be put to 100% when no padding, border or margin)
	Percentages: Padding & Margin depends on the width of the parent element
	Width: Minimum & Maximum (min-width, max-width) used to set hard limits
	Height: Minimum & Maximum (min-height, max-height) used to set hard limits
	Scaling Images and Videos VERY COMMON EXAMPLE: .container img { max-width: 100%; height: auto; display: block;}
	Scaling Background Images EXAMPLE body { background-image: url('#'); background-repeat: no-repeat; background-position: center; background-size: cover;}

	Em/Rem should be used for textbased layouts, otherwise use percentages


Media Queries
	Media Queries Example @media only screen and (max-width: 480px) { body { font-size: 12px} }
	Range Example @media only screen and (min-width: 320px) and (max-width: 480px) { /*ruleset for 320px-480px*/ }
	Dots Per Inch (DPI) / Dots Per Centimeter (DPC) Example @media only screen and (min-resolution: 300dpi) { /* CSS for high resolution screens */ }
	And Operator Example @media only screen and (max-width: 480px) and (min-resolution: 300dpi) { /* CSS ruleset */ }
	Comma Separated List Example @media only screen and (min-width: 480px), (orientation: landscape) { /* CSS ruleset */ }
	Breakpoints (typical width of devices) mobile (<= 480px), Table (<= 768px), Tablet landscape (<= 1024px), Laptop (<= 1600px), Desktop (> 1600px)

	Comma = one needs to be true, AND = all need to be true
	orientation: landscape (more width than height) / portrait (more height than width)


	When a website responds to the size of the screen it’s viewed on, it’s called a responsive website.
	You can write media queries to help with different screen sizes.
	Adding the viewport <meta> tag to our code allows us to control the width and scaling of the viewport so that it’s sized and scaled correctly on all devices.
	Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
	Media features can detect many aspects of a user’s browser, including the screen’s width, height, resolution, orientation, and more.
	The and operator requires multiple media features to be true at once.
	A comma separated list of media features only requires one media feature to be true for the code within to be applied.
	The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. Natural breakpoints are found by resizing the browser.
