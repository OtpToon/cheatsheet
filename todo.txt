CSS

a {
	text-decoration: underline/none;
}

order important!
[tag]:link
[tag]:visited
[tag]:hover
[tag]:active

cursor: pointer;

button{
	box-shadow: [offset-x: length] [offset-y: length] ;
}
use example:
hover background change
active color change

float: left;

transition: ;

.something > li {}

.something li+li::before
li+li = only if those 2 are adjacent it selects them
::before = puts this before the element
::after
content: "";

border-left-color: [color];
vertical-align: ;

breadcrumbs:
	location - based on hierarchical structure of site
	attribute - based on attributes of current page or item
	path - unique to a user’s journey on the site

object-fit: cover/contain/fill/none/scale-down


HTML

title=" " in <a> (tooltips)
<button></button>

wrap a in div with class and change class background-color property for propper interaction


Design Guide

Wireframes and Prototypes: https://medium.com/thinking-design/everything-you-need-to-know-about-wireframes-and-prototypes-76f828a1bcbc
Order of HTML
enter CSS rulessets without content when creating html tags

Grid Design: columns, rows, gutter, margin
(usually 12 or 16 columns and 4ish rows, gutter is significantly smaller than row/column)
(responsive: pc 12, tablet 6, movile 4 column grid)
whitespace: passive and active

Remember, the reasons we design using grids are:
-Promote consistency within our designs
-Properly align elements on our page
-Provide ample spacing between content
Remember a grid is made up of:
-Columns
-Gutters
-Margins
Spacing is incredibly important within a design to ensure:
-Elements have ample room to breathe
-Denote emphasis on certain parts of a page
-Promote harmonious patterns and rhythms within your designs

Flexbox (Design/CSS)
display:flex/inline-flex; -> Flex *container*
main axis (horizontal(default))
justify-content:flex-start/-end/center/space-around/-between, flex-wrap:wrap/wrap-reverse/(default)nowrap
cross axis (vertical(default))
align-items:flex-start/-end/center/baseline/stretch(combined with min/max width/height) (single row), align-content:flex-start/-end/center/space-between/-around/(default)stretch (multiple rows)

flex-grow:0(default)/1/2/... , flex-shrink:0/1(default)/2/..., flex-basis:length,(shorthand) flex:grow shrink(optional) basis(optional)
changing axis behaviour
flex-direction:row(default)/row-reverse/column/column-reverse, (shorthand)flex-flow:flex-direction flex-wrap;


Grid (Design/CSS)
	display: grid;
	grid-template-columns: (length/percentage) repeat for amount of columns split by spaces
	grid-template-rows: (length/percentage) repeat for amount of rows split by spaces
	grid-template: rows "/" columns
	repeat([amount of rows/columns] [width/height specifications])
	minmax([smallest length], [biggest length])
	grid-template-area: "[row 1]" "[row 2]" etc example: "header header" "nav nav" "info services" "footer footer";
	row-gap:[length] / column-gap:[length] / gap: [row-gap] [column-gap]
	grid-row-start / grid-row-end: [number of gridline] (1 = above first row, 3 = above 3rd row etc) or span [number of rows]
	grid-row: [grid-row-start] "/" [grid-row-end] or span [number of rows]
	grid-column-start / grid-column-end: [number of gridline] (1 = left of first column, 3 = left of third column etc) span [number of columns]
	grid-column: [grid-column-start] "/" [grid-column-end] or or span [number of columns]
	grid-area: [grid-row-start] / [grid-column-start] / [grid-row-end] / [grid-column-end]
	grid-area: [name of element in grid-template-area] example: header/nav/info/services/footer

	unit fr : splits available space into amount of "fr" used and distributes space relatively (1fr 3fr = space divided into 4 equal parts, 1fr gets 1 part, 3fr gets 3 parts)

	justify-items: position within the grid
	justify-content: position within the grid-element
	same as flexbox, but without flex
	align-items: position within the grid
	align-content: position within the grid-element
	same as flexbox, but without flex
	justify-self/align-self - override of grid-rules justify-items/align-items (start/end/center/stretch)

	grid-auto-rows/grid-auto-columns: lengths (px, %, fr, repeat() )
	grid-auto-flow: row (or) column (with) dense (fill rows from left to right, add rows as needed) (fill columns from top to bot, add columns as needed) (tries to fill the grid when smaller elements are added)
	


Relative Measurements
	Em ("em" in css) changes as the font-size of the current element changes (font-size 16 -> 2em = 32)
	Rem ("rem" in css) (Root em) depends on the font-size of the <html>-tag (set by the browser of the device unless otherwise specified)
	Percentages: Height & Width depends on the size of the parent element (width should only be put to 100% when no padding, border or margin)
	Percentages: Padding & Margin depends on the width of the parent element
	Width: Minimum & Maximum (min-width, max-width) used to set hard limits
	Height: Minimum & Maximum (min-height, max-height) used to set hard limits
	Scaling Images and Videos VERY COMMON EXAMPLE: .container img { max-width: 100%; height: auto; display: block;}
	Scaling Background Images EXAMPLE body { background-image: url('#'); background-repeat: no-repeat; background-position: center; background-size: cover;}

	Em/Rem should be used for textbased layouts, otherwise use percentages


Media Queries
	Media Queries Example @media only screen and (max-width: 480px) { body { font-size: 12px} }
	Range Example @media only screen and (min-width: 320px) and (max-width: 480px) { /*ruleset for 320px-480px*/ }
	Dots Per Inch (DPI) / Dots Per Centimeter (DPC) Example @media only screen and (min-resolution: 300dpi) { /* CSS for high resolution screens */ }
	And Operator Example @media only screen and (max-width: 480px) and (min-resolution: 300dpi) { /* CSS ruleset */ }
	Comma Separated List Example @media only screen and (min-width: 480px), (orientation: landscape) { /* CSS ruleset */ }
	Breakpoints (typical width of devices) mobile (<= 480px), Table (<= 768px), Tablet landscape (<= 1024px), Laptop (<= 1600px), Desktop (> 1600px)

	Comma = one needs to be true, AND = all need to be true
	orientation: landscape (more width than height) / portrait (more height than width)


	When a website responds to the size of the screen it’s viewed on, it’s called a responsive website.
	You can write media queries to help with different screen sizes.
	Adding the viewport <meta> tag to our code allows us to control the width and scaling of the viewport so that it’s sized and scaled correctly on all devices.
	Media queries require media features. Media features are the conditions that must be met to render the CSS within a media query.
	Media features can detect many aspects of a user’s browser, including the screen’s width, height, resolution, orientation, and more.
	The and operator requires multiple media features to be true at once.
	A comma separated list of media features only requires one media feature to be true for the code within to be applied.
	The best practice for identifying where media queries should be set is by resizing the browser to determine where the content naturally breaks. Natural breakpoints are found by resizing the browser.




Javascript

console.log([this will be printed to the console]);
; should always be used, but code can usually run properly without
// comment
/* */ area comment
. dot operator
= asignment operator

Data Types
Number: any number, including decimals 4, 8, 1516, 23.42
BigInt: Any number, greater than 253-1 or less than -(253-1), with n appended to the number: 1234567890123456n
String: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes " ... "
Boolean: This data type only has two possible values— either true or false (without quotes)
Null: This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes).
Undefined: This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null. undefined means that a given value does not exist.
Symbol: new feature, not explained
Object: Collections of related data

Arithmetic Operators
Add: +
Subtract: -
Multiply:*
Divide: /
Remainder: % (auch mod or modulo genannt)

[String 1] + [String 2] = [String 1String 2]


Properties
'Hello'.length; = 5


Methods
'hello'.toUpperCase(); = 'HELLO'
'Hey'.startsWith('H'); = true
'   something    '.trim(); = 'something'


Built-in Objects
Math.random(); = random number between 0(inclusive) and 1(exclusive)
Math.floor(Math.random() * 50); = a whole number between 0(inclusive) and 50(exclusive)
Math.ceil(); = 
Number.isInteger();

Variables
Container for a value
var: short for variable, is a JavaScript keyword that creates, or declares, a new variable.
(ES6 or later)
let: keyword signals that the variable can be reassigned a different value. if init empty its type Undefined
const: variable cannot be reassigned because it is constant. can't be empty.

can't start with numbers
are case sensitive myname != myName
can't be a keyword


Mathematical Assignment Operators
w = w + 1; is the same as w += 1; (same for -, *, /)

Increment/Decrement Operator
a++ a-- 
++a --a

String Concatenation with Variables
console.log('I own a pet ' + myPet + '.'); = I own a pet [myPet].

String Interpolation (ES6 or later)
In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals
const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);

const myName = 'Toon';
let myCity = 'some City';
console.log(`My name is ${myName}. My favorite city is ${myCity}`);


typeof Operator
typeof [value/variable] = 'string'/'number' etc


Conditional Statements
if, else if (statement){code}
else {code}
comparison operators <, >, <=, >=, ===, !==
logical operators &&, ||, ! (AND, OR, NOT/BANG)
truthy vs falsy values falsy: 0, ''/"", null, undefined, NaN
truthy and falsy Assignment if (username){defaultName = username;}else{defaultName = 'Stranger';}, let username = ''; let defaultName = username || 'Stranger';
ternary operators shorthand if...else: [statement] ? [what happens when true] : [what happens when false];

switch statement
let groceryItem = 'papaya';

switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}

Functions

declaration:
function [name]([optional parameters = [optional default value]]){
	[code]
	return [return value] (default value is data type undefined);
}
expressions:
const [name] = function ([optional parameters]){
	[code]
	return [return value];
};
arrow functions:
const [name] = ([optional parameters]) => {
	[code]
	return [return value];
};
	no parameters:
		const functionName = () => {};
	one parameter:
		const functionName = paramOne => {};
	two or more:
		const functionName = (paramOne, paramTwo) => {};

	single line code:
		const sumNumbers = number => number + number; //"implicit return" returns number + number
	multi line code:
		const sumNumbers = number => {
			const sum = number + number;
			return sum;
		};

calling:
[name]([optional input]);

Helper function: function used to do a specific job of another function

Scope defines where variables can be accessed or referenced
Global Scope are defined outside of Blocks (Global Variables)
Block Scope is only accessible to the code within the curly braces (Local Variables)
Scope Pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes (Names used more than once)
Tightly scoping your variables will greatly improve your code in several ways:
	It will make your code more legible since the blocks will organize your code into discrete sections.
	It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!
	It’s easier to maintain your code, since your code will be modular.
	It will save memory in your code because it will cease to exist after the block finishes running.



Running JS
	in Browser console
		ctrl + shift + j (inspect element) -> console (on about:blank for pure JS, on any site to change that sites behaviour)
	
	in Browser Runtime Environment (Front End/Browser)
		<script> </script> //in html code
	
	in Node Runtime Environment (Back End/Serverside)
		installed Node.js -> write code in file -> terminal "node [filename]"
		(same in VS-Code Terminal, debugger also works)

Arrays
	creating arrays
		array literal: let variable = [x, 'y', 5, false];
	accessing arrays
		variable[0]; (strings are arrays of chars)
		variable[0] = ...;

		let condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];

		const utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];

		condiments[0] = 'Mayo';
		console.log(condiments);
		condiments = ['Mayo'];
		console.log(condiments);
		utensils[3] = 'Spoon';
		console.log(utensils);

		utensils.length; //=> 4
		utensils.push('something', 'something else'); //=> ['Fork', 'Knife', 'Chopsticks', 'Spork', 'something', 'something else']
		utensils.pop(); //=> ['Fork', 'Knife', 'Chopsticks', 'Spork', 'something'], returns 'something else'
		utensils.shift(); //=> ['Knife', 'Chopsticks', 'Spork', 'something'], returns 'Fork'
		utensils.unshift('thing1', 'thing2'); // => ['thing1', 'thing2', 'Knife', 'Chopsticks', 'Spork', 'something']
		//.join(), .slice(), .splice(), .shift(), .unshift(), and .concat() 

		when you pass an array into a function, if the array is mutated inside the function, that change will be maintained outside the function as well.
		You might also see this concept explained as pass-by-reference
	

	array structures
		nested arrays
			const nestedArr = [[1], [2, 3]];
			nestedArr[1]; // => [2, 3]
			nestedArr[1][0]; // => 2
	array manipulation